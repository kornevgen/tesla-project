\section{Описание тестовых шаблонов}

Тестовый шаблон задает свойства будущей тестовой программы. Как и
тестовая программа, в тестовом шаблоне указывается
последовательность инструкций тестовой программы. Каждый элемент
такой последовательности содержит указание имени инструкции,
параметров и тестовой ситуации –- связи значений операндов и
состояния микропроцессора (ячейки кэш-памяти, регистры, другие
подсистемы) перед началом выполнения инструкции. В качестве
параметров инструкции в тестовом шаблоне могут выступать переменные
величины –- регистры, непосредственные значения, адреса. Отдельно
могут быть зафиксированы в тестовой программе зависимости
(предикаты) между переменными величинами.

Пример описания тестового шаблона :

REGISTER ax : 32;

REGISTER bx : 32;

ADD ax, bx, bx

LOAD ax, bx @ l1Miss, l2Hit

XOR bx, ax, bx

В этом тестовом шаблоне три команды - ADD, LOAD и XOR. Шаблон
начинается с объявления переменных с указанием их битовых длин.
Тестовая ситуация указывается после знака <<@>>: тестовая ситуация
второй команды –- <<l1Miss, l2Hit>>: l1Miss -- указание на то, что
при загрузке из памяти должен произойти промах в кэш-памяти первого
уровня, l2Hit -- указание на то, что пр загрузке из памяти
задействована кэш-память второго уровня и во время выполнения
инструкции должно произойти кэш-попадание.

Сейчас нас будут интересовать лишь инструкции работы с памятью, коих
две:
\begin{itemize}
\item <<LOAD var, address>> осуществляет загрузку значения в
переменную var из памяти по адресу address;
\item <<STORE value, address>> осуществляет сохранение значения
value в памяти по адресу address.
\end{itemize}

Задача поиска тестовых значений для шаблонов с такими инструкциями
состоит в поиске не только начальных значений регистров, но и
начального состояния кэш-памяти (т.е. значения ячеек кэш-памяти
перед началом исполнения тестового шаблона). Эта задача решена для
кэш-памяти произвольной организации. Но здесь будут разобраны лишь 2
более простых случая организации кэш-памяти: полностью ассоциативный
кэш и кэш прямого доступа, а общий случай будет дан лишь
иллюстративно. Произвольный кэш включает в себя характеристики как
полностью ассоциативного, так и кэша прямого доступа. Поэтому в
рамках общего случая рассматриваемые способы организации кэш-памяти
могут считаться базисными. Также для простоты далее будет
рассматриваться одноуровненый кэш.
