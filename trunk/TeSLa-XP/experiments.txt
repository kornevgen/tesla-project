Ruby 1.8.6

везде рассматривается сегмент виртуальной памяти с небольшими виртуальными адресами.
такой сегмент Cached и Mapped.
повысить процент sat'а можно было бы и за счет рассмотрения других сегментов.

1) на шаблонах из двух инструкций (всевозможные зависимости по данным)
совместная генерация
при некотором начальном состоянии получилось:
всего тестовых программ - 240
из них sat - 49%
из них unsat (несовместные т/ш и совместные т/ш) - 51% = 15% + 36%
время - 85 сек
маленький кэш (8 ячеек)
=> КПД совместной генерации на спец.нач.данных: 58% (49/85)


2) на шаблонах из двух инструкций (всевозможные зависимости по данным)
совместная генерация
при произвольном начальном состоянии получилось:
все: 240
sat: 32 %
unsat: 67 % = 15% несовм. т/ш + 52% не смогла совм.генерация 
общее время: 169.359 с.
полный кэш (4*2^7 ячеек)
=> КПД совместной генерации на произв.нач.данных: 38%  (32/85)



3) на шаблонах из двух инструкций (всевозможные зависимости по данным)
зеркальная генерация
при произвольном начальном состоянии получилось (брался только microTLB):
все: 240
sat: 85 %
unsat: 15 % (несовместные шаблоны)
общее время: 224 с.



исследовать еще максимальную нужную длину инициализирующей последовательности
и посмотреть, насколько она будет меньше чем nw+M (для 2/3 инструкций).