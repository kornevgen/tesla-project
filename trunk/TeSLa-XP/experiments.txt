Ruby 1.8.6

везде рассматривается сегмент виртуальной памяти с небольшими виртуальными адресами.
такой сегмент Cached и Mapped.
повысить процент sat'а можно было бы и за счет рассмотрения других сегментов.

1) на шаблонах из двух инструкций (всевозможные зависимости по данным)
совместная генерация
при некотором начальном состоянии получилось:
всего тестовых программ - 240
время генерации тестовых программ - 
из них sat - 57%
из них unsat (несовместные т/ш и совместные т/ш) - 43%
время - 85 сек
маленький кэш (8 ячеек)



2) на шаблонах из двух инструкций (всевозможные зависимости по данным)
совместная генерация
при произвольном начальном состоянии получилось:
все: 240
sat: 37 %
unsat: 63 %
общее время: 160 с.
полный кэш (4*2^7 ячеек)


3) на шаблонах из двух инструкций (всевозможные зависимости по данным)
зеркальная генерация
при произвольном начальном состоянии получилось (брался только microTLB):
все: 240
sat: 100 % --- что крайне странно, поскольку среди всех т/ш должны быть несовместные!
unsat: 0 %
общее время: 84.031 с.



исследовать еще максимальную нужную длину инициализирующей последовательности
и посмотреть, насколько она будет меньше чем nw+M (для 2/3 инструкций).


сейчас неправильно транслируется тестовая ситуация на TLB: там появляются отрицательные константы в неравенстве суммы!