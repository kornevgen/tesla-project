цель: минимизировать изменения при смене архитектуры

* поддержка в шаблонах различных архитектур (т.е. кэширующих буферов и таблиц)

* композиция ситуаций
* модель виртуальной памяти
* зависимости на виртуальных/физических адресах разных инструкций


ТЕСТОВЫЙ ШАБЛОН
1) регистры и константы

2) инструкция: имя, идентификатор (опционально)
	* аргумент: имя (у них тоже может быть id, чтобы не помнить точный порядок аргументов)
	* внешнее имя: имя, id (это id должно быть в описании тестовой ситуации!)
	* ситуация
		конструктор or-and-branch
		ветвь: имя
	* доступ
		произвольное наполнение, оно анализируется процедурами

3) допущение (assume)
	* ситуация (с конструктором и ветвями)

cacheReplace - надо поддерживать... - из первой вытеснили что-то и его же используем во второй
	- это получается уже не "тестовая ситуация", а "зависимость"
	(совпадение вытесненного тегсета первой инструкции с 
совпадение сетов - как поддерживать просто??

ОПИСАНИЕ ТЕСТОВОЙ СИТУАЦИИ
1) аргументы: имя, длина, статус (result/readonly)

2) оператор let: имя новой переменной (опционально), идентификатор (для внешнего!) (опционально)
	* выражение
// если отсутствует имя, генерируется новое уникальное имя, но использоваться переменную нельзя, однако для нее можно тем самым задать идентификатор

3) оператор assume
	* выражение

4) вызов процедуры: имя
	* аргумент: идентификатор (будет полезно в процедуре)
		* выражение или текстовая константа (DATA, WORD) -- процедура сама разберется, надо ли запускать трансляцию в ограничения в зависимости от идентификатора аргумента
		* new-описание: длина
			* имя аргумента
- надо еще как-то пометить те переменные, которые в процедуре получают значение
	для таких переменных надо знать имя и битовую длину


//// исправить в диссертации описание XML на новый
//// для процедур добавить в общую часть объявление new-переменных
//// добавить в диссертации мысли о формализации MMU (транслятор описания MMU в ограничения, возможно как-то предусмотреть подсказки для уменьшения размера ограничений)
               ((язык NML дает описание регистров, простых инструкций - Кирилл Козлов добавляет в него описания кэш-памяти ))
	- кэширующие буферы (их параметры)
	- таблицы
	- какое-то обобщение CCA, что это поле берется из тестовой ситуации, которая задается статически в шаблоне...
	- общие биты (отсюда совместная генерация)
	- какие-то доп.ограничения....- какие нужны?


* тестовый шаблон
* описания тестовых ситуаций
* описание микропроцессора (модель MMU, модель виртуальной памяти) => генератор ограничений
