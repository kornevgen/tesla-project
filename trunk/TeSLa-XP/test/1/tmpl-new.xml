<template>
	<register id="x" length="64" />	<!-- регистр -->
	<register id="y" length="64" />	
	<register id="z" length="64" />		
	<constant id="c" length="16" />	<!-- константа -->	
	
	<instruction name="ADD">  <!-- очередная инструкция тестовой программы -->
		<argument name="x" />  <!-- аргумент инструкции - регистр или константа -->
		<argument name="y" />
		<argument name="z" />
		<external name="v1" id="virtual" /> <!-- имена переменных, которые выносят на уровень шаблона все "ветви" этой инструкции -->
				<!-- такими переменными могут быть виртуальные адреса, физические адреса,
						результаты некоторых промежуточных вычислений -->
				<!-- каждая переменная имеет свой идентификатор внутри тестовой ситуации,
						а здесь этому идентификатору приписывается уникальный name в шаблоне -->
		<external name="p1" id="phys" /> 
		<situation>
			<or>  <!-- конструктор простейших ситуаций ("ветвей") -->
				<and>
					<branch name="overflow" />   <!-- простейшая ситуация ("ветвь") -->
					<branch name="normal" />
				</and>
				<branch name="zero" />
			</or>
			
			<access> <!-- обращение к ресурсу микропроцессора -->
			<!-- инструкция может совершить не более одного обращения к каждому ресурсу -->
			<!-- семантически должно проверяться, что
				в каждой "ветви" есть все указанные тут обращения -->
				<cache level="1" type="DATA" id="miss" />  <!-- обращение в кэш-память -->
				<cache level="2" type="DATA" id="miss" /> <!-- наполнение атрибутами зависит от архитектуры -->
				<cache level="3" type="DATA" id="hit" />
				<tlb  id="invalid"> <!-- обращение в TLB -->
					<microtlb type="DATA" id="miss"></microtlb>
				</tlb>
			</access>
			
		</situation>
	</instruction>
	
	<assert>   <!-- "assertion" на значения регистров, констант и введенные переменные -->
		<!-- может использоваться для задания доп.ограничения на адреса разных инструкций
			 или для задания пути в графе потока управления тестовой программы (используется
			 при тестировании инструкций переходов BRANCH) -->
		<or>
			<and>
				<branch name="ff1" />
				<branch name="ff2" />
				<branch name="ff3" />
			</and>
			<branch name="ff4" />
		</or>
	</assert>
</template>
					