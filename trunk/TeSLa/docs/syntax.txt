#summary Грамматика языка

program :
	( 'VAR' ID ':' INTEGER )-list[ ';' ]
	( 'ASSERT' boolexpr | ID ':=' expr )-list[ ';' ]
	;
	
boolexpr : boolexpr_brackets-list[ 'AND', 'OR' ] ;
// AND имеет более высокий приоритет, чем OR
	
boolexpr_brackets 
	: ID '(' ID-list[','] ')'
	| '(' boolexpr ')'
	| expr ( '>-' | '<-' | '>=-' | '<=-' | '>+' | '<+' | '>=+' | '<=+' | '=' | '#' ) expr
	;

expr : bit_expr-list[ '+', '-', '><+', '><-' ] ;
// умножение (><+ и ><-) имеет выше приоритет, чем сложение и вычитание

bit_expr 
	: bit_term
	| '(' INTEGER ')' bit_expr  // знаковое расширение
	| bit_expr '.' bit_expr 	// конкатенация
	| bit_term '[' INTEGER ']'
	| bit_term '[' INTEGER .. INTEGER ']'
	| bit_term '^' INTEGER
	;
// "знаковое расширение" имеет здесь самый низкий приоритет
// затем следующий приоритет у конкатенации
// все остальные операции имеют одинаковый самый высокий здесь приоритет

bit_term 
	: ID | INTEGER | '(' expr ')' ;

ID	: ('a'..'z'| 'A'..'Z' ) ('a'..'z' | '_' | 'A'..'Z' | '0'..'9')*;
INTEGER :  ('0' .. '9' )+;

возможны многострочные комментарии и однострочные в стиле Java