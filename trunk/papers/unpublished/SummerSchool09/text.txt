Instruction-cluster-based test program generation for microprocessors
("целиковая" генерация тестовых программ)

системное тестирование

формальные методы в системном тестировании

ключевой артефакт - тестовые программы
(В моем докладе речь пойдет о тестовых программах)

системное функциональное тестирование осуществляется с использованием тестовых программ,
они загружаются в память, исполняются, процесс исполнения анализируется на правильность

откуда взять тестовые программы? какими они должны быть?
(как генерировать тестовые программы? на что нацеливаясь?)

кросс-компиляция, случайная генерация, шаблоны - способы генерирования тестовых программ

Genesys-Pro
model checking для конвейеров (свойство вручную, EXPRESSION-архитектура => SMV выдает контрпримеры)
конечно-автоматная модель микропроцессора (Ур и Кохно)
генетические алгоритмы (тест.программа - граф, вершины - инструкции, мутация структуры графа и значений операндов)

комбинаторные методы генерации тестовых программ дешевле, но дают некоторое качество

что из себя представляют тестовые шаблоны

фокус на генерацию тестовых программ по шаблонам

как себя ведет Genesys-Pro (составляет по-командную CSP)

предложение:
	рассматривать шаблон целиком,
	выделять из нее задачу на TLB-кэш, 
	использовать формализацию поведения TLB и кэш с помощью множеств целых чисел


=========================================================

есть техника, про которую они что-то слышали, но руками не трогали.
Надо показать, как конкретно применить эту технику на реальной задаче.
Обзор детальный делать не нужно - ценность информации о том, что еще один человек применил данную технику, небольшая

Генерация тестовых программ по шаблонам с использованием ограничений: подход Genesys и подход Tesla.


