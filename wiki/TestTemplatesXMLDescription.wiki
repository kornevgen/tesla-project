#summary Формат XML-описания тестового шаблона. В конце дан пример.
#labels Featured

= Формат =

Корнем является `template`.
Возможные сыновья:
  * `register` (регистр)
  * `constant` (константа)
  * `instruction` (инструкция)
  * `assume` (допущение).

== Регистр ==

Корнем является `register`. Сыновей нет.
Атрибуты:
  * `name` - имя регистра (текст), обязательный
  * `length` - битовая длина регистра (число), обязательный
Семантическое ограничение: все имена регистров, констант и внешних переменных в одном шаблоне должны быть разными.
Пример:
{{{
<register name="x" length="64" />
}}}

== Константа ==

Корнем является `constant`. Сыновей нет.
Атрибуты:
  * `name` - имя константы (текст), обязательный
  * `length` - битовая длина константы (число), обязательный
Семантическое ограничение: все имена регистров, констант и внешних переменных в одном шаблоне должны быть разными.
Пример:
{{{
<constant name="c" length="16" />
}}}

== Инструкция ==

Корнем является `instruction`.
Его атрибуты:
  * `name` - имя инструкции (текст), обязательный
  * `id` - идентификатор инструкции (текст), опциональный
Возможные сыновья:
  * `argument` (аргумент)
  * `external` (объявление внешней переменной)
  * `situation` (тестовая ситуация)
Семантические ограничения:
  * в каждой ветви количество аргументов и их битовые длины должны соответствовать аргументам допущения (идти в том же порядке)
  * в каждой ветви `result`-аргументы соответствуют разным переменным
Пример:
{{{
<instruction name="ADD" id="2">
...
</instruction>
}}}

===Аргумент инструкции===
Корнем является `argument`. Сыновей нет
Его атрибуты:
  * `name` - имя аргумента (текст), обязательный
Семантическое ограничение: имя аргумента должно встречаться среди регистров, констант и внешних переменных предыдущих инструкций.
Пример:
{{{
<argument name="x" />
}}}

===Объявление внешней переменной инструкции===
Механизм внешних переменных позволяет вынести на уровень тестового шаблона локальные переменные описаний тестовых ситуаций и определить зависимости на этих переменных на уровне тестового шаблона.

Корнем является `external`. Сыновей нет.
Его атрибуты:
  * `name` - имя внешней переменной (текст), обязательный
  * `id` - идентификатор внешней переменной (текст), обязательный
Семантические ограничения:
  * все имена регистров, констант и внешних переменных в одном шаблоне должны быть разными
  * идентификатор должен встречаться во всех ветвях тестовой ситуации
Пример:
{{{
<external name="v1" id="virtual" />
}}}

===Тестовая ситуация===
Корнем является `situation`. Атрибутов нет.
Возможные сыновья:
  * ветвь или выражение, задающее композицию ветвей
  * `access` (обращение к ресурсам), опциональный
Пример:
{{{
<situation>
	<or>
		<and>
			<branch name="overflow" />
			<branch name="normal" />
		</and>
		<branch name="zero" />
	</or>
			
	<access>
	...
	</access>		
</situation>
}}}

Ветви задаются с помощью узла `branch`, его единственным атрибутом является имя файла с описанием тестовой ситуации, сыновей у него нет. Ветви составляются в композицию в виде дерева с узлами `or` и `and`.

Содержимое узла `access` не специфицируется, поскольку обрабатывается пока не автоматически, а вручную написанным скриптом. Семантическое правило: на всех ветвях должны быть обращения ко всем сыновьям узла `access`. Пример содержимого:
{{{
<access>
	<cache level="1" type="DATA" id="miss" />
	<cache level="2" type="DATA" id="replace" from="1"/>
	<cache level="3" type="DATA" id="hit" />
	<tlb id="invalid" />
	<microtlb type="DATA" id="miss" />
</access>
}}}

== Допущение ==
Служит для задания дополнительных зависимостей на регистры, константы и внешние переменные. Поэтому структура этого узла очень сильно напоминает структуру `instruction`. Семантические ограничения:
  * в тестовых ситуациях ветвей не должно быть `result`-аргументов
  * в каждой ветви количество аргументов и их битовые длины должны соответствовать аргументам допущения (идти в том же порядке)

Корнем является `assume`. Атрибутов нет.
Возможные сыновья:
  * аргументы (так же, как и для инструкций)
  * ветвь или выражение, задающее композицию ветвей
Пример:
{{{
<assume>
	<argument name="x" />
	<argument name="y" />
	<argument name="z" />
	<or>
		<and>
			<branch name="overflow" />
			<branch name="normal" />
		</and>
		<branch name="zero" />
	</or>
</assume>
}}}


= Пример =
{{{
<template>
	<register name="x" length="64" />	<!-- регистр -->
	<register name="y" length="64" />	
	<register name="z" length="64" />		
	<constant name="c" length="16" />	<!-- константа -->	
	
	<instruction name="ADD" id="2">  <!-- очередная инструкция тестовой программы -->
		<argument name="x" />  <!-- аргумент инструкции - регистр или константа -->
		<argument name="y" />
		<argument name="z" />
		<external name="v1" id="virtual" /> <!-- имена переменных, которые выносят на уровень шаблона все "ветви" этой инструкции -->
				<!-- такими переменными могут быть виртуальные адреса, физические адреса,
						результаты некоторых промежуточных вычислений -->
				<!-- каждая переменная имеет свой идентификатор внутри тестовой ситуации,
						а здесь этому идентификатору приписывается уникальный name в шаблоне -->
		<external name="p1" id="phys" /> 
		<situation>
			<or>  <!-- конструктор простейших ситуаций ("ветвей") -->
				<and>
					<branch name="overflow" />   <!-- простейшая ситуация ("ветвь") -->
					<branch name="normal" />
				</and>
				<branch name="zero" />
			</or>
			
			<access> <!-- обращение к ресурсу микропроцессора -->
			<!-- инструкция может совершить не более одного обращения к каждому ресурсу -->
			<!-- семантически должно проверяться, что
				в каждой "ветви" есть все указанные тут обращения -->
				<cache level="1" type="DATA" id="miss" />  <!-- обращение в кэш-память -->
				<cache level="2" type="DATA" id="replace" from="1"/> <!-- наполнение атрибутами зависит от архитектуры -->
				<cache level="3" type="DATA" id="hit" />
				<tlb  id="invalid" /> <!-- обращение в TLB -->
				<microtlb type="DATA" id="miss" />
			</access>
			
		</situation>
	</instruction>
	
	<assume>   <!-- "assertion" на значения регистров, констант и введенные переменные -->
		<!-- может использоваться для задания доп.ограничения на адреса разных инструкций
			 или для задания пути в графе потока управления тестовой программы (используется
			 при тестировании инструкций переходов BRANCH) -->
		<or>
			<and>
				<branch name="ff1" />
				<branch name="ff2" />
				<branch name="ff3" />
			</and>
			<branch name="ff4" />
		</or>
	</assume>
</template>
}}}